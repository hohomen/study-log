68. 관계 대수(Relational Algebra)
-관계 대수는 관계 해석과 함께 릴레이션을 다루는 대표적인 이론적 방법이다. 
-관계 대수는 어떻게 질의를 수행할 것인가를 명시하는 절차적인 언어이다. 
-관계 대수는 상용 관계 DBMS들에서 널리 사용되는 SQL의 이론적인 기초이다.
-관계 대수는 SQL을 구현하고 최적화하기 위해 DBMS 내부 언어로서도 사용된다. 

관계 대수는 기존의 릴레이션들로부터 새로운 릴레이션을 생성한다. 릴레이션이나 관계대수식(이것의 결과도 릴레이션임)에 연산자들을 적용하여 보다 복잡한 관계 대수식을 점차적으로 만들 수 있다.
ㄷ 한자

<필수적인 연산자  :  설렉션, 프로젝션, 합집합, 차집합, 카티션 곱 (관계 연산자 중에서 실렉션과 프로젝션을 제외하고 모두 이항 연산자이다.)

1. 실렉션(Selection)  δ(라틴어) : 수평 연산(튜플을 구한다)
실렉션 연산자는 한 릴레이션에서 실렉션 조건(selection condition = predicate)을 만족하는 투플들의 부분 집합을 생성한다.
실렉션 조건(predicate)은 일반적으로 릴레이션의 임의의 애트리뷰트와 상수를 비교연산(=, <>, <=, <, >=, >)할 수 있으며 AND(∧), OR(∨), Not(￢) 등의 논리(부울) 연산자를 사용하여 여러 개의 조건들을 하나의 조건으로 결합시킬 수도 있다.)
질의) EMPLOYEE 릴레이션에서 3번 부서에 소속된 사원들을 검색하라  :  δdno=3(EMPLOYEE) 

2. 프로젝션(Projection) π : 수직 연산
프로젝션 연산자는 실렉션과 달리 한 릴레이션의 애트리뷰트들의 부분집합을 구한다. 프로젝션의 결과로 생성되는 릴레이션은 <애트리뷰트 리스트>에 명시된 애트리뷰트들만 가지며, 이 애트리뷰트들은 애트리뷰트 리스트에 열거된 순서와 동일하게 결과 릴레이션에 나타난다. (cf. 프로젝션 중복 P.153 배움터, 프로젝션 연산의 결과 릴레이션에는 입력 릴레이션으로부터 골라낸 일부 애트리뷰트들만 포함되므로 중복된 투플들이 존재할 수 있다. DBMS의 타협)
형식) π<애트리뷰트 리스트> (릴레이션)

#집합 연산자
-릴레이션은 투플들의 집합이기 때문에 기존의 집합 연산이 릴레이션에도 적용된다.
-집합 연산자들은 두 개의 릴레이션은 입력으로 받아들이므로 이항 연산자이다.
-결과 릴레이션의 차수는 R 또는 S의 차수와 같으며, 결과 릴레이션의 애트리뷰트 이름들은 R의 애트리뷰트들의 이름과 같거나 S의 애트리뷰트들의 이름과 같다.
-집합 연산자의 입력으로 사용되는 두 개의 릴레이션은 [$합집합 호환(union compatible)$]이어야 한다. 실제로 관계 데이터베이스 내의 임의의 두 릴레이션이 합집합 호환인 경우는 드물다. 일반적으로 프로젝션 연산과 같이 어떤 연산의 결과로 유도된 릴레이션들이 합집합 호환인 경우가 많다.
-합집합 호환 : 두 릴레이션 R1(A1, A2, ...An)과 R2(B1, B2, ...Bm)이 합집합 호환일 필요 충분 조건은 n=m이고, 모든 1≤i≤n에 대해 domain(Ai) = domain(Bi)이다. 다시 말해서, 두 릴레이션의 애트리뷰트 수가 같고 대응되는 애트리뷰트들의 도메인이 같다는 것이다.

3. 합집합(Union) ∪
- 릴레이션이 투플들의 집합이므로 결과 릴레이션에서 중복된 투플들은 제외된다.
4. 차집합(Difference) －
5. 카티션 곱 ×
-실제 응용에서는 사용하지 않지만 조인을 하기위한 연산이다.(이론적 배경)
-카티션 곱 R × S는 차수가 n + m이고, 카디날리티가 i * j이고, 애트리뷰트가 (A1, A2, ... An, B1, B2, ... Bn)이며, R과 S의 투플들의 모든 가능한 조합으로 이루어진 릴레이션이다.

<편의를 위해 유도된 연산자.
교집합, (세타, 동등, 자연, 세미 - 조인), 디비전
6. 교집합(Intersection) ∩
7. 조인(Join) ⋈
- Join 연산은 공통 속성을 중심으로 2개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만든다.
- Join 연산의 결과로 만들어진 릴레이션의 차수는 조인된 두 릴레이션의 차수를 합한 것과 같다.(세타 조인, 동등 조인)
- Join 연산의 결과는 카티션 프로덕트 연산을 수행한 다음 Select 연산을 수행한 것과 같다. (조인 연산자는 시간이 오래 걸리는 연산자이므로 조인을 효율적으로 수행하는 여러 가지 알고리즘들이 개발되었다.)(세타 조인을 수행하기 위해서 양쪽 릴레이션의 애트리뷰트들이 세타 조인 조건을 만족하는 투플들만 골라낸다. 이것이 카티션 곱과 조인의 주요 차이점이다.)
- 세타는 (=, <>, <=, <, >=, >) 중의 하나이다. 
- 동등 조인은 세타 조인 중에서 비교 연산자가 =인 조건이다.
- 자연 조인은 동등 조인의 결과 릴레이션에서 조인 애트리뷰트를 한 개 제외한 것을 자연 조인이라고 한다. (자연 조인은 여러 가지 조인 연산자들 중에서 가장 자주 사용된다.)
형식) R⋈(join 조건)S
8. 디비전(Division) ÷ (그림을 보는 것이 이해가 빠를 것이다. 배움터 P.163)
차수가 n+m인 릴레이션 R(A1, A2, ... , An, B1, B2, ... ,Bm)과 차수가 m인 릴레이션 S(B1, B2, ... , Bm)의 디비전 R ÷ S는 차수가 n이고, S에 속하는 모든 투플 u에 대하역 투플 tu(투플 t와 투플 u를 결합한 것)가 R에 존재하는 투플 t들의 집합이다.
사용 예) 3학년을 위해 개설된 전공과목은 5개이다. 학생들 중에서 3학년 전공과목 5개를 모두 수강하고 있는 학생을 검색하라.
형식) R[속성r ÷ 속성s]S : 속성 r과 속성s는 동일 속성 값을 가지는 속성이어야 한다.
(이 형식이라면 S릴레이션 속성s안에 전공과목 5개가 들어있으면 되겠다.)


