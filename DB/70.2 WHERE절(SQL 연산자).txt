Where 절에서 사용되는 연산자는 3가지 종류가 있다.

1. 비교 연산자 2. SQL 연산자 3. 논리 연산자

비교연산자 : = ,  <> , > , < . >= , <=

SQL 연산자 
BETWEEN a AND b : a와 b의 값 사이에 있으면 된다.(a와 b 값이 포함됨)
IN (list) : 리스트에 있는 값 중에서 어느 하나라도 일치하면 된다.
LIKE '비교문자열' : 비교문자열과 형태가 일치하면 된다.(%, _ 사용)
IS NULL : NULL 값인 경우

논리 연산자 : AND, OR, NOT

부정 비교 연산자 
!=, ^=, <> : 같지 않다. 
(<> 가장 많이 사용.ANSI)
NOT 칼럼명 =  : ~와 같지 않다. (ex. not position = 'MF')
NOT 칼럼명 >  : ~보다 크지 않다.

부정 SQL 연산자
NOT BETWEEN a AND b : a와 b의 값 사이에 있지 않다.(a와 b 값을 포함하지 않는다.)
NOT IN (list) : list 값과 일치하지 않는다.
IS NOT NULL : NULL 값을 갖지 않는다.

우선 순위
1. 괄호 ()
2. NOT 연산자
3. 비교 연산자, SQL 비교 연산자
4. AND
5. OR


연산자의 추가적 이해
------------------------------------------------------------------------------------------------------
부울 연산자 : AND, OR, NOT

#다수의 검색 조건
WHERE절에 여러 조건들이 논리 연산자로 결합된 프레디키트를 포함할 수 있다.

CF. 프레디키트(predicate)(술어)
실렉션 조건을 '프레디키트'라고도 한다.
실렉션 조건은 일반적으로 {= <> <= < >= >}등의 비교 연산자, AND, OR, NOT 등의 부울 연산자를 포함할 수 있다.
(수학에서는 True or False를 반환하는 함수를 프레디키트라고 한다.

부정 검색 조건
사용자가 원하지 않는 투플들을 배제하기 위해서 {$부정 연산자$}를 사용한다.
SELECT   EMPNAME, SALARY
FROM    EMPLOYEE
WHERE  TITLE='과장' AND DNO <> 1;

범위를 사용한 검색
BETWEEN의 장점은 SQL문의 WHERE절을 좀 더 읽기 쉽게 만든다는 것이다.
=WHERE SALARY BETWEEN 30000 AND 45000;
=WHERE SALARY >=30000 AND SALARY <=45000;

리스트를 사용한 검색
IN은 리스트 내의 값과 비교한다. IN의 부정은 NOT IN이다. 
=WHERE DNO IN (1, 2, 3);
=WHERE DNO = 1 OR DNO = 2 OR DNO = 3;

예시)
사원 테이블에서 JOB이 MANAGER이면서 20번 부서에 속하거나, JOB이 CLERK이면서 30번 부서에 속하는 사원의 정보를 출력
SELECT ENAME, JOB, DEPTNO
FROM EMP
WHERE (JOB, DEPTNO) IN (('MANAGER',20),('CLERK',30));

#널값
널값을 포함한 다른 값과 널값을 +, - 등을 사용하여 연산하면 결과는 널이 된다.
Count(*)를 제외한 집단 함수(sum, avg, max, min)들은 널값을 무시한다.
(COUNT(*)는 널이나 중복된 값들이 나타나는 것에 상관없이 결과 릴레이션의 모든 투플들의 총 개수를 구하는 반면에
 COUNT(애트리뷰트)는 해당 애트리뷰트에서 널값이 아닌 값들의 개수를 구한다.
 모든 집단 함수들이 널값을 제거한 후 남아 있는 값들에 대해서 값을 구한다.)
--> 애트리뷰트의 값이 널인지 비교하려면 새로운 비교 연산자인 IS NULL 이나 IS NOT NULL을 사용해야 한다.

널이 프레디키트에 미치는 영향을 유의해야 한다.
애트리뷰트에 들어 있는 널값은 '알려지지 않음(unknown)'을 의미하기 때문에 SQL은 세 가지 값의 논리를 사용한다.
true = 1, false = 0, unknown = 0.5로 생각하고 C1과 C2가 true, false, unknown 중 하나의 값을 갖는 조건일 때
C1 AND C2 = min(C1, C2)
C1 OR C2 = max(C1, C2)
NOT(C1) = 1 - C1
임을 기억하면 생각보다 쉽게 응용할 수 있다.




