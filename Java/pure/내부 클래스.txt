(내부 클래스는 주로 AWT나 Swing과 같은 GUI어플리케이션의 어벤트처리 외에는 잘 사용하지 않을 정도로 사용빈도가 높지 않다.)

내부 클래스는 클래스 내에 선언된 클래스이다. 클래스에 다른 클래스 선언하는 이유는 간단하다. 두 클래스가 서로 긴밀한 관계에 있기 때문이다. 
한 클래스를 다른 클래스의 내부 클래스로 선언하면 두 클래스의 멤버들 간에 {*서로 쉽게 접근할 수 있다}는 장점과 외부에는 불필요한 클래스를 감춤으로써 {*코드의 복잡성을 줄일 수 있다}는 장점을 얻을 수 있다.

class A {  // 외부 클래스
	class B {
	  // 내부 클래스
	}
}

내부 클래스의 종류
인스턴스 클래스 : 외부 클래스의 멤버 변수 선언위치에 선언하며, 외부 클래스의 인스턴스멤버처럼 다루어진다. 주로 외부 클래스의 인스턴스멤버들과 관련된 작업에 사용할 목적으로 선언된다.
스태틱 클래스 : 외부 클래스의 멤버변수 선언위치에 선언하며, 외부 클래스의 static멤버처럼 다루어진다. 주로 외부 클래스의 static멤버, 특히 static메서드에서 사용될 목적으로 선언된다.
지역 클래스 : 외부 클래스의 메서드나 초기화블럭 안에 선언하며, 선언된 영역 내부에서만 사용될 수 있다.
*익명 클래스 : 클래스의 선언과 객체의 생성을 동시에 하는 이름없는 클래스(일회용)

내부 클래스의 제어자와 접근성

익명 클래스(anonymous class)
익명클래스는 특이하게도 다른 내부 클래스들과는 달리 이름이 없다. 클래스의 선언과 객체의 생성을 동시에 하기 때문에 단 한번만 사용될 수 있고 오직 하나의 객체만을 생성할 수 있는 일회용 클래스이다.

new 조상클래스이름( ) {
    //멤버 선언
}

	또는
new 구현 인터페이스 이름( ) {
    //멤버 선언
}

예제
import java.awt.*;
import java.awt.event.*;

class  
InnerEx8 {
	public static void main(String[] args) {

		Button b = new Button("Start");

		b.addActionListener(new ActionListener() {

				public void actionPerformed(ActionEvent e) {

					System.out.println("ActionEvent occurred!!!");

				}

		} // 익명 클래스의 끝

	);

} // main메서드의 끝
} // InnerEx8클래스의 끝


이전 코드
class  InnerEx7{
	public static void main(String[] args) {
		Button b = new Button("Start");
		b.addActionListener(new EventHandler());
	}
}

class EventHandler implements ActionListener {
	public void actionPerformed(ActionEvent e) {
		System.out.println("ActionEvent occurred!!!");
	}
}

comment
익명클래스에 대해 간단하게 알아보았다. 현재 함수형 프로그래밍이 유행하고 있다.
자바에서는 함수를 일급객체로 취급하지 못하지만, 위에서와 같이 익명클래스를 사용하면
메서드 자체는 못넘기되 메서드를 감싼 익명클래스를 넘길 수 는 있다. 
즉, 익명클래스로 자바도 함수형 프로그래밍 흉내를 낼 수 있다고 생각한다.
출처: https://mommoo.tistory.com/16 [개발자로 홀로 서기]



