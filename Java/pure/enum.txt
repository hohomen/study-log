enum(enumeration) 열거형
(pope)
정수인데 사실은 프로그래밍에서 
1.magin number사용하지 말라고 하잖아 -> 이름을 대입할 수 있는 방식
2. 몇가지 선택할 수 있는 옵션 (ex. direction) 선택 강제.
3. 숫자형이니까 bit flag enum

있는 언어가 있고 없는 언어가 있다.
대게 script언어는 없다. 단점이라면 선택사항을 넣을 때
1, 2, 3, 4 혹은 EAST, WEST SOUTH 등 string처리해야 한다.
(컴파일 처리가 안됨, 대소문자)

(자바의 정석)
자바의 열거형은 C언어의 열거형보다 더 향상된 것으로 열거형이 갖는 값뿐만 아니라 타입까지 관리하기 때문에 보다 논리적인 오류를 줄일 수 있다.
그리고 더 중요한 것은 상수의 값이 바뀌면, 해당 상수를 참조하는 모든 소스를 다시 컴파일해야 한다는 것이다. 하지만 열거형 상수를 사용하면, 기존의 소스를 다시 컴파일하지 않아도 된다.

열거형을 정의하는 방법은 간단하다.
enum 열거형이름 { 상수명1, 상수명2, .... }
enum Direction { EAST, SOUTH, WEST, NORTH }

열거형에 정의된 상수를 사용하는 방법은 '열거형이름.상수명'이다. 클래스의 static변수를 참조하는 것과 동일하다.
class Unit {
	int x, y; //유닛의 위치
	Direction dir; // 열거형을 인스턴스 변수로 선언

	void init() {
		dir = Direction.EAST; // 유닛의 방향을 EAST로 초기화
	}
}


생활코딩
상수2 - enum
enum은 jdk1.5부터 도입된 기능이다.
enum이 출연하기 전까지는 다른 방법으로 상수사용. 
이런 방법들을 살펴보면서 보면서 어떤 배경에서 enum이 도입되었는 지를 이해하자.


전역변수 사용이 권장되지 않는다. Apple값의 충돌 가능성  --> 기업 Apple과 과일 Apple을 구분하기 위해 인터페이스를 도입했다.
interface FRUIT{
    int APPLE=1, PEACH=2, BANANA=3;
}
interface COMPANY{
    int GOOGLE=1, APPLE=2, ORACLE=3;
}
 
public class ConstantDemo {
     
    public static void main(String[] args) {
        int type = FRUIT.APPLE;
        switch(type){
            case FRUIT.APPLE:
                System.out.println(57+" kcal");
                break;
            case FRUIT.PEACH:
                System.out.println(34+" kcal");
                break;
            case FRUIT.BANANA:
                System.out.println(93+" kcal");
                break;
        }
    }
}

하지만 여기서도 문제점이 있는데 
if(FRUIT.APPLE == COMPANY.APPLE)
    System.out.println("과일 애플과 기업 애플은 같습니다.")
(FRUIT.APPLE, COMPANY.APPLE 모두 int(정수)라는 같은 데이터 타입을 공유하고 있다는 점이다.

만약 다른 데이터 타입이 아니라면 비교가 불가능할 것이다.
---> 이렇게 개선하면 런타입 에러를 컴파일 타임에 잡을 수 있을 것이다.
class Fruit{
    public static final Fruit APPLE  = new Fruit();
    public static final Fruit PEACH  = new Fruit();
    public static final Fruit BANANA = new Fruit();

하지만 Switch문에서는 이 상수를 사용할 수 없다.
switch의 조건으로는 몇가지 제한된 데이터 타입만을 사용할 수 있다. byte, short, char, int, enum, String, Character, Byte, Short, Integer
여기서 enum을 사용하게 되는 배경을 이해할 수 있을 것이다.

---> 위의 문법적 패턴을 자바는 간결하게 사용할 수 있도록 지원하였다.
enum Fruit{
    APPLE, PEACH, BANANA;
}
Fruit type = Fruit.APPLE;
        switch(type){
            case APPLE:
                System.out.println(57+" kcal");
                break;
            case PEACH:
                System.out.println(34+" kcal");
                break;
            case BANANA:
                System.out.println(93+" kcal");
                break;
        }

정의)
enum은 열거형(enumerated type)이라고 부른다. {$열거형은 서로 연관된 상수들의 집합$}이라고 할 수 있다. 위의 예제에서는 Fruit와 Company가 말하자면 열거인 셈이다. 이러한 패턴을 자바 1.5부터 문법적으로 지원하기 시작했는데 그것이 열거형이다. (enum 상수를 사용하기 위한 좋은 패턴을 자바에서 수용.)
cf. 배열 = 연관된 값들의 집합

효과)
enum이 서로 다른 상수 그룹에 대한 비교를 컴파일 시점에서 차단할 수 있다는 것을 의미한다. {$상수 그룹 별로 클래스를 만든 것의 효과$}를 enum도 갖는다는 것을 알 수 있다.

enum을 사용하는 이유를 정리하면 아래와 같다.
코드가 단순해진다.
인스턴스 생성과 상속을 방지한다.
키워드 enum을 사용하기 때문에 구현의 의도가 열거임을 분명하게 나타낼 수 있다.



