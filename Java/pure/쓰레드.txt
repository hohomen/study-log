# 프로세스와 쓰레드
프로세스) 간단히 말해서 '실행 중인 프로그램'이다. (프로그램을 실행하면 OS로부터 실행에 필요한 자원(메모리)을 할당받아 프로세스가 된다.)

쓰레드) CPU 이용의 기본 단위이다. 스레드는 스레드id, 프로그램 카운터, 레지스터 집합 그리고 스택으로 구성된다.

프로세스는 프로그램을 수행하는 데 필요한 데이터와 메모리 등의 자원 그리고 스레드로 구성되어 있으며 프로세스의 자원을 이용해서 실제로 작업을 수행하는 것이 바로 스레드(일꾼)이다.
 그래서 모든 프로세스에는 최소한 하나 이상의 스레드가 존재하며, 둘 이상의 스레드를 가진 프로세스를 '멀티스레드 프로세스'라고 한다.

# 두 가지 구현 방법이 있다.
1.Thread 클래스를 상속받는 방법과 2.Runable 인터페이스를 구현하는 방법
어느 쪽을 선택해도 별 차이는 없지만 Thread클래스를 상속받으면 다른 클래스를 상속받을 수 없기 때문에, Runnable 인터페이스를 구현하는 방법이 일반적이다. 또한 Runnble 인터페이스를 구현하는 방법은 재사용성(reusability)이 높고 코드의 일관성(consistency)을 유지할 수 있기 때문에 보다 객체지향적인 방법이라 할 수 있겠다.

1. Thread 클래스를 상속하여 구현(다중 상속시 사용 불가능)

    public class MyThread1 extends Thread {
        String str;
        public MyThread1(String str){
            this.str = str;
        }

        public void run(){
            for(int i = 0; i < 10; i ++){
                System.out.print(str);
                try {
                    Thread.sleep((int)(Math.random() * 1000));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } 
        } 
    }

    public class ThreadExam1 {
        public static void main(String[] args) {
            MyThread1 t1 = new MyThread1("*");
            MyThread1 t2 = new MyThread1("-");
//run( )이 아닌 start( )를 호출한다. 
//start( )는 쓰레드가 실행할 준비를 하고 준비가 되면 run( ) 메서드를 호출한다.
            t1.start();
//쓰레드가 실행되면 프로그램의 수행 흐름은 2개가 된다. main쓰레드와 t1쓰레드
            t2.start();
            System.out.print("!!!!!");  
        }   
    }

2. Runnable 인터페이스를 구현
    public class MyThread2 implements Runnable {
	내용은 위와 같음.
    }

    public class ThreadExam2 {  
        public static void main(String[] args) {
            Runnable(or MyThread2) r1 = new MyThread2("*");
            Thread t1 = new Thread(r1);
            Thread t2 = new Thread(new MyThread2("-")); //다른 방법의 생성

//start( )를 바로 호출할 수 없기 때문에(Runnable에는 run( ) 밖에 없다.)
//--> 우회적으로 호출한다. Thread(Runnable target ) 생성자는 Runnable 인터페이스를 받아들일 수 있다.
            t1.start();
            t2.start();
            System.out.print("!!!!!");  
        }   
    }




