IoC (Inversion of Control) DI (Dependency Injection)

DI(객체와 객체간의 의존) 장점
V.1
의존 객체의 변경이 용이 --> 유지보수 편리
단위 테스트가 쉬워짐
코드 가독성 향상
재사용성 향상
V.2
접착 코드(glue code) 감소
- JNDI를 사용할 경우 복잡해질 수 있느 코드를 DI로 대체하면 깔끔해진다.

의존성 외부화
- 설정 옵션 분리, 의존성 변경 용이함
한 곳에서 의존성 관리
- 각각의 클래스 내부에서 자신의 의존성을 관리하는 것 보단 한 곳에서 관리하는 것이 편리함
테스트 편의성 향상
- 테스트용 더비(Dummy) 구현체로 쉽게 교체할 수 있기 때문에 귿.
좋은 애플리케이션 설계 도출
- DI를 활용하다보면 컴포넌트를 인터페이스를 사용하여 연결하게 된다. 이러한 설계야 스프링 전에도 가능했지만 스프링이 알아서 다 해주는걸 무료로 사용할 수 있으니까 비즈니스 로직에만 집중할 수 있을 것이다.



의존성 주입, 내가 느끼기에 스프링 프레임워크의 핵심,
context-root.xml  다 DI
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<bean id="dataSource"class="org.springframework.jdbc.datasource.DriverManagerDataSource"
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"destroy-method="clearCache">

(code with spring, 의존성:
기존의 프레임워크에서 적극적이지 않았던 객체의 설계와 관리 구조를 스프링에서 제공하기 때문에 개발자에게 많은 환영을 받았습니다.)

스프링에서는 생성자를 통한 의존성 주입과 속성을 통한 의존성 주입을 모두 지원한다.(여기서는 속성을 통한 주입만 살펴본다.)
(생성자를 통한 의존성 주입은 예제 1, 2번) 

Inversion of Control / Dependency Injection
제어의 역전이라고도 하는 의존성 주입을 알아보자.

#의존성이란 무엇인가?

먼저 자바에서의 의존성은 무엇인지 알아보자.

의사 코드
운전자가 자동차를 생산한다.
자동차는 내부적으로 타이어를 생산한다.

자바로 표현
new Car( );

Car 객체 생성자 내부에서 new Tire( );
public Car() {
		tire = new KoreaTire();
	}

그리고 의존성을 단순하게 정의하면 다음과 같다.
의존성은 new다.
new를 실행하는 Car와 Tire 사이에서 Car가 Tire에 의존한다.
(마무리에서 변수 생성도 의존이라고 하지만 설명할 때는 객체 생성 new를 의존이라고 하는 것이 
누구에게나 나을 것 같다. 객체 생성을 외부에서(xml) 관리하는 것이 의존성 주입이라 볼 수 있다.
여기엔 설계원칙과 디자인 패턴이 또한 적용될 수 있다.)


#주입이란?
결국 자동차 내부에서 타이어를 생산하는 것이 아니라 외부에서 생산된 타이어를 자동차에 장착하는 작업이 주입이다.

스프링 없이 의존성 주입하기1 - 생성자를 통한 의존성 주입
public class car{
Tire tire;
public Car(Tire tire) {
		this.tire = tire;
	}	
}
public class Driver 
public static void main(String[] args) {
		Tire tire = new AmericaTire();
		
		Car car = new Car(tire);
		System.out.println(car.getTireBrand());
	}

new를 통해 타이어를 생산하는 부분이 Car.java에서 Driver.java로 이동했다. --> 코드의 유연성이 생긴다.

기존 방식이라면 Car는 KoreaTire, AmericaTire에 대해 정확히 알고 있어야만 그에 해당하는 객체를 생성할 수 있었다. 
의존성 주입을 정요할 경우 Car는 그저 Tire 인터페이스를 구현한 어떤 객체가 들어오기만 하면 정상적으로 작동하게 된다.
의존성 주입을 하면 확장성도 좋아지는데, 나중에 ChinaTire, JapanTire, EnglandTire 등등 새로운 타이어 브랜드가 생겨도 각 타이어 브랜드들이 Tire 인터페이스를 구현한다면 Car.java 코드를 변경할 필요 없이 사용할 수 있기 때문이다.(또한 컴파일할 필요도 없다. 구현한 것만 컴파일 해서 배포 -> 코드 재컴파일과 재배포에 대한 부담을 덜 수 있다.)
(이것은 인터페이스를 구현(준수)했기에 얻는 이점이라고 볼 수 있다.)


스프링 없이 의존성 주입하기2 - 속성을 통한 의존성 주입
(1과 차이) Car 클래스에 getter setter 메소드를 도입.
public class Car {
	Tire tire;
	
	public Tire getTire(){
		return tire;
	}
	public void setTire(Tire tire){
		this.tire = tire;
	}
Driver Class{
public static void main(String[] args) {
	Tire tire = new KoreaTire();		
	Car car = new Car();
	car.setTire(tire);
	
	System.out.println(car.getTireBrand());
}

프로그래밍 세계에서는 생성자를 통해 의존성을 주입하는 방법과 속성을 통해 의존성을 주입하는 방법 중 어느 쪽이 더 좋은가에 대한 의견이 분분한데, 대부분의 프로젝트에서는 속성을 통한 의존성 주입을 선호하는 듯하다.
특히 스프링에서 애노테이션(@)을 사용하는 경우 주로 속성 주입 방식을 사용하게 된다.


3. 스프링을 통한 의존성 주입 - XML 파일 사용.
여기서는 시퀀스 다이어그램이 달라졌다.(클래스 다이어그램은 달라진 것이 없다.)
바로 스프링 프레임워크(종합쇼핑몰)이다.(현실 세계와 더 유사해짐)p.254

(의사코드, 4와 비교할 때 확인)
운전자가 종합 쇼핑몰에서 타이어를 구매한다.
운전자가 종합 쇼핑몰에서 자동차를 구매한다.
운전자가 자동차에 타이어를 장착한다.

public class Driver {
	public static void main(String[] args) {
	//종합쇼핑몰이지만 상품이 입점돼 있어야만 판매할 수 있을 것이다. expert002.xml(Spring Bean Configuration File 생성)
	ApplicationContext context = new ClassPathXmlApplicationContext("expert002/expert002.xml");
	
	Car car = context.getBean("car", Car.class);			
	Tire tire = context.getBean("americaTire", Tire.class);				
	car.setTire(tire);

tire라는 상품이 진열되어 있고 구매(getBean)할 수 있다.
--id속성과 class속성의 연결을 잘 확인하자.

expert002.xml  bean등록 확인

<bean id="tire" class="expert002.KoreaTire"></bean>
<bean id="americaTire" class="expert002.AmericaTire"></bean>
<bean id="car" class="expert002.Car"></bean>	

스프링을 도입해서 얻는 이득은 무엇일까? 가장 큰 이득을 꼽으라면 자동차의 타이어 브랜드를 변경할 때 그 무엇도 재컴파일/재배포 하지 않아도 xml 파일만 수정하면 프로그램의 실행 결과를 바꿀 수 있다는 것이다. 

Driver.java의 Tire tire = context.getBean("tire", Tire.class); 부분이 타이어를 구매하는 부분인데, 자바 코드 어디에서도 KoreaTire클래스나 America Tire 클래스를 지칭하는 부분이 없다. expert002.xml에 이에 해당하는 내용이 있기 때문이다. 지금은 KoreaTire가 id가 tire에 해당하고 있다.

실제로 클래스 파일만 배포한 환경이라면 매우 큰 장정이라고 볼 수 있다.


4. 스프링을 통한 의존성 주입 - 스프링 설정 파일(xml)에서 속성 주입.
(3번과 의사코드와 코드의 변화를 잘 확인하자.)
의사코드( 점점 더 현실 세계를 닮아가고 있다.)
운전자가 종합 쇼핑몰에서 자동차를 구매 요청한다.
종합 쇼핑몰은 자동차를 생산한다.
종합 쇼핑몰은 타이어를 생산한다.
종합 쇼핑몰은 자동차에 타이어를 장착한다.
종합 쇼핑몰은 운전자에게 자동차를 전달한다.

자바
ApplicationContext context = new ClassPathXmlApplicationContext("expert003/expert003.xml");
Car car = context.getBean("car", Car.class);		

XML
<bean id="koreaTire" class="expert003.KoreaTire"></bean>
<bean id="americaTire" class="expert003.AmericaTire"></bean>

<bean id="car" class="expert003.Car">
	<property name="tire"(=car.setTire(tire)); ref="koreaTire"></property> //ref에 id koreaTire가 들어갔다.
</bean>	

자바에서 접근자 및 설정자 메서드를 속성 메서드라고 하는데 영어로는 property다. 
결국 Driver.java에서 car.setTire(tire)라고 하던 부분을 XML 파일의 property태그를 이용해 대체하는 것이다.

5. 스프링을 통한 의존성 주입 - @Autowired를 통한 주입
@Autowired 스프링 설정 파일을 보고 자동으로 속성 설정자 메서드에 해당하는 역할을 해주겠다는 의미이다.(자동 의존성 주입)
창조적 게으름의 산물
Tire tire;
public void setTire(Tire trie){ //설정자 메서드
	this.tire = tire;
}
// 대부분 다음과 같은 코드를 작성한다.
//improt 문 하나와 @Autowired 애노테이션을 이용하면 설정자 메서드를 이용하지 않고도 속성을 주입한다.

java
import org.springframework.beans.factory.annotation.Autowired;

public class Car {
	@Autowired//주로 인터페이스를 autowired로 해서 구현 메소드를 손쉽게 이용한다.
	Tire tire; //(setTire 메소드 대체)

xml
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
#<context:annotation-config/>#
<bean id="tire" class="expert004.KoreaTire"></bean>
<bean id="americaTire" class="expert004.AmericaTire"></bean>
<bean id="car" class="expert004.Car"></bean>


type을 구현한 빈이 있는가? --아니오-- No matching bean 에러
  |
 예
  |
빈이 한 개인가? ---예 ---- 유일한 빈을 객체에 할당.
  |
 아니오
  |
 id가 일치하는 하나의 빈이 있는가? --- 아니오 ----No unique bean 에러
  |
 예
  |
유일한 빈을 객체에 할당.


