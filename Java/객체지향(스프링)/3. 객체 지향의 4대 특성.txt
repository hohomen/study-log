캡슐화 상속 추상화 다형성
1. 추상화 : 모델링 = 속성과 기능에 대해서 정의
p.91추상화는 주관적이다. 추상화의 결과가 설계자(=모델러)마다 다를 수 있다. 추상화의 결과물은 모델이다. 모델은 자바 언어에서 클래스로 표현된다. 클래스 모델을 표현하는 국제 표준 표기법은 UML(unified modeling language) 클래스 다이어그램이다.
나) 다른 말로 모델링이라 할 수 있는데 어떤 클래스의 속성과 기능에 대해서 정의하는 것을 의미합니다. 
자바는 Class(='분류') 키워드를 통해 객체 지향의 추상화를 지원하고 있다.
세상에 존재하는 유일무이한 객체를 특성(속성+기능)에 따라 분류해 보니 객체를 통칭할 수 있는 집합적 개념. 즉 클래스(분류)가 나오게 된다.
객체는 실체다.(세상에 존재하는 유일무이한 사물)

2. 상속 : 재사용 + 확장
객체 지향의 상속은 자바의 extend 키워드가 말하듯 재사용 + 확장으로 이해하는 것이 맞다.(영어 단어를 그대로 옮기면서 생긴 오해)
객체 지향에서의 상속은 상위 클래스의 특성을 하위 클래스에서 상속(특성 상속)하고 거기에 더해 필요한 특성을 추가, 즉 확장해서 사용할 수 있다는 의미다.
- 하위 클래스는 상위 클래스다.  (LSP(리스코프 치환 원칙))
3. 다형성: 사용편의성
"여러 가지 형태를 가질 수 있는 능력"(상속과 깊은 관계) 같은 이름의 메소드를 다른 객체 또는 서브 클래스에 호출할 수 있는 특징을 다형성이라 한다. 자바는 오버라이드(재정의), 오버로딩(중복정의)로 이것을 가능하게 한다.
4. 캡슐화: 정보은닉
속성과 관련된 오퍼레이션을 클래스 안에 묶어서 하나로 취급하는 것.
캡슐 속에 있는 항목에 대한 정보를 외부에 감추는 것을 정보 은닉이라 한다.



객체 지향은 인간 지향이다.
어셈블리어부터 절차/구조적 프래그래밍(포인터)까지의 과정은 인간이 기계를 이해하려는 노력에서 크게 벗어나지 못했다.

객체 지향이 현실 세계를 반영한다. 그 증거는 객체(사물)다. 동시에 인간도 세상을 객체(사물)로 인식한다.
- 세상에 존재하는 모든 것은 사물, 즉 객체(object)다.
- 각각의 사물은 고유하다.
- 사물은 속성을 갖는다.
- 사물은 행위를 한다.

그리고 사물을 하나하나 이해하기 보다는 사물을 분류(Class)해서 이해하는 것이 인간의 인지법이다.
- 직립보행을 하며 말을 하는 존재를 사람이라고 분류한다.
- 연미복, 짧은 다리, 날지 못하는 새를 펭귄이라고 분류한다.
- 밤하늘에 반짝이는 사물들을 별이라고 분류한다.

--> 객체 지향은 직관적이고 쉽고 인간적이다.

객체 지향 이전에는 속성과 메서들를 객체라는 단위로 묶지 않고 속성(필드) 따로, 메서드(함수) 따로 분리된 형태로 프로그램을 작성했었다. 객체 지향에서는 우리가 주변에서 실제 사물을 인지 및 사고하는 방식대로 객체 단위(속성 + 메소드)의 프로그래밍이 가능하다.

물체 중심 프로그래밍(선택의 논란은 많지만 크게 중요하지 않음)
기존에는 히터의 온도를 따로 저장했었다.



#객체 지향은 직관적이고 쉽고 인간적이다는 증거를 이제부터 하나 하나 살펴보자.
객체 지향의 4대 특성: 캡 상추다.

1. 추상화 : 모델링
자바는 Class(='분류') 키워드를 통해 객체 지향의 추상화를 지원하고 있다.
세상에 존재하는 유일무이한 객체를 특성(속성+기능)에 따라 분류해 보니 객체를 통칭할 수 있는 집합적 개념. 즉 클래스(분류)가 나오게 된다.
객체는 실체다.(세상에 존재하는 유일무이한 사물)

cf.객체와 인스턴스
객체 : 세상에 존재하는 유일무이한 사물(object) 따라서 속성값을 갖는다.
인스턴스 : 클래스를 이용해 object를 만들었다는 것을 강조할 때는 object라는 표현보다는 클래스의 인스턴스(instance)라는 표현을 쓴다.
클래스 : 같은 특성을 지닌 여러 객체를 총칭하는 집합의 개념이다. 클래스는 분류에 대한 개념이지 실체가 아니다.(객체들을 특성에 따라 분류했다는 의미)
객체지향에서 추상화(모델링)의 결과물 (정의- 속성과 메소드)

자바에서의 클래스와 객체의 표현
클래스(data type) 객체_참조_변수 = new 클래스( );

p.91추상화는 주관적이다. 추상화의 결과가 설계자(=모델러)마다 다를 수 있다. 추상화의 결과물은 모델이다. 모델은 자바 언어에서 클래스로 표현된다. 클래스 모델을 표현하는 국제 표준 표기법은 UML(unified modeling language) 클래스 다이어그램이다.

2. 상속 : 재사용 + 확장
객체 지향의 상속은 자바의 extend 키워드가 말하듯 재사용 + 확장으로 이해하는 것이 맞다.(영어 단어를 그대로 옮기면서 생긴 오해)
객체 지향에서의 상속은 상위 클래스의 특성을 하위 클래스에서 상속(특성 상속)하고 거기에 더해 필요한 특성을 추가, 즉 황장해서 사용할 수 있다는 의미다.
(그런데 사람들은 클래스의 특성을 상속한다는 말에서 특성*을 빼고 클래스를 상속한다는 뜻으로 오해를 하니 (부모 - 자식) 관계가 나와버린 것이다. 이에 동의한다면 (부모 클래스 - 자식 클래스)라는 표현 보다는 {상위 클래스(분류) - 하위 클래스(분류) || 슈퍼 클래스 - 서브 클래스} 개념으로 이해하기 바란다.) 그리고 상위 클래스 쪽으로 갈수록 추상화, 일반화됐다고 말하며, 하위 클래스 쪽으로 갈수록 구체화, 특수화됐다고 말한다. 상속의 개념이 조직도나 계층도가 아닌 분류도라는 사실도 함께 기억하자.

상속 관계에서 반드시 만족해야 할 문장.
- 하위 클래스는 상위 클래스다.
- 포유류는 동물이다. (X 아버지는 할아버지다. X)
(로버트C 마틴이 주장하고 이제 모두가 동의하는 객체 지향 설계의 5원칙 가운데 LSP(리스코프 치환 원칙)을 나타내느 말이다.)

클래스명은 분류스럽게 객체 참조 변수명은 유일무이한 사물처럼 작명하자.
어떤 프로그래머는 Bird aBird 또는 Bird theBird 형태로 코딩한다.

상속의 강력함을 보여주는 코드.

public class 동물{
    String myClass;
    
    동물(){
        myClass = "동물";        
    }
  void showMe(){
      System.out.println(myClass);
  }
}

public class 조류 extends 동물{
    조류( ) {
        myClass = "고래";
    }
}
    public static void main(String[] args) {
        동물[] animals = new 동물[7];
        anmimals[0] = new 동물();
        anmimals[1] = new 포유류();
        anmimals[2] = new 조류();
        anmimals[3] = new 고래();
        anmimals[4] = new 박쥐;
        anmimals[5] = new 참새;
        anmimals[6] = new 펭귄;

        for(int index =0; index < anmials.length; index++){
            animals[index].showMe();
        }
    }

상위 클래스에서만 showMe( ) 메서드를 구현했지만 모든 하위 클래스의 객체에서 showMe( ) 메서드를 사용할 수 있다.
고래 한 마리를 포유류 또는 동물이라고 하는 데 이견이 있는가? 객체 지향은 현실 세계를, 인간의 논리를 그대로 코드로 옮기는 힘이 있다.
모든 클래스는 결국 Object의 특성을 물려받는다. 그래서 어떤 클래스의 인스턴스이든 개발자는 toString( ) 메서드를 사용할 수 있는 것이다.

하위 클래스 is a kind of 상위 클래스 = 하위 클래스는 상위 클래스의 한 분류
is a 관계는 클래스와 객체의 관계로 오해할 소지가 있다.


다형성: 사용편의성
(소웨:여러 가지 형태를 가지고 있다는 의미이다. 같은 이름의 메소드를 다른 객체 또는 서브 클래스에 호출할 수 있는 특징을 다형성이라 한다.)
자바는 오버라이드(재정의), 오버로딩(중복정의)로 이것을 가능하게 한다.

캡슐화: 정보은닉
속성과 관련된 오퍼레이션을 클래스 안에 묶어서 하나로 취급하는 것.
캡슐 속에 있는 항목에 대한 정보를 외부에 감추는 것을 정보 은닉이라 한다.




