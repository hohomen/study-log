C#에서 지원하는 이벤트 기반 프로그래밍을 이해하려면 먼저 대리자를 알아야 하고, 그 다음에 이벤트를 알아야 합니다.

콜백 : 비서처럼 대신 어떤 일을  해줄 코드를 두고, 이 코드가 실행할 세부 코드는 컴파일 시점이 아닌 실행 시점에 부여

대리자
- (C#에서)대리자는 콜백을 구현하기 위해 사용됩니다.
- 대리자는 메소드에 대한 참조입니다. 대리자에 메소드의 주소르 할당한 후 대리자를 호출하면 이 대리자가 메소드를 호출해줍니다.

기본 예제
using System;

namespace Delegate
{
    //대리자의 선언
    delegate int MyDelegate( int a, int b);

    class Calculator
    {
        //대리자는 인스턴스 메소드도 참조할 수 있고
        public int Plus(int a, int b)
        {
            return a + b;
        }
        //대리자는 정적 메소드도 참조할 수 있습니다
        public static int Minus(int a, int b)
        {
            return a - b;
        }
    }

    class MainApp
    {
        static void Main(string[] args)
        {
            Calculator Calc = new Calculator();
            MyDelegate Callback;

            //대리자를 메소드를 호출하듯 사용하면, 참조하고 있는 메소드가 실행됩니다.
            Callback = new MyDelegate( Calc.Plus ); 
            Console.WriteLine(Callback(3, 4));

            Callback = new MyDelegate(Calculator.Minus);
            Console.WriteLine(Callback(7, 5));
        }
    }
}



대리자를 사용하는 이유 : 프로그래밍을 하다 보면 "값"이 아닌 "코드" 자체를 매개 변수로 넘기고 싶을 때가 많습니다.

ex) 배열을 정렬하는 메소드를 만들어 봅시다.
메소드가 정렬을 수행할 때 사용하는 비교 루틴을 매개 변수로 넣을 수 잇으면 오름차순으로 정렬할 지 내림차순으로 정렬할 지의 고민은 프로그래머가 알아서 하면 됩니다. 바로 이럴 때 대리자가 사용됩니다.

using System;

namespace UsingCallback
{
    // 1. 먼저 대리자를 선언합니다.
    delegate int Compare(int a, int b);

    class MainApp
    {
        // 2. Compare 대리자가 참조할 메소드를 작성합니다.
        static int AscendCompare(int a, int b)
        {
            if (a > b)
                return 1;
            else if( a == b )
                return 0;
            else
                return -1 ; 
        }

        static int DescendCompare(int a, int b)
        {
            if (a < b)
                return 1;
            else if (a == b)
                return 0;
            else
                return -1;
        }
        
        // 3. 정렬할 배열과 비교 메소드를 참조할 대리자를 매개 변수로 받는 정렬 메소드를 작성합니다.
        static void BubbleSort(int[] DataSet, Compare Comparer) 
        { 
            int i = 0; 
            int j = 0; 
            int temp = 0; 
 
            for ( i=0; i<DataSet.Length-1; i++ ) 
            {
                for (j = 0; j < DataSet.Length - (i + 1); j++)  
                { 
                    if ( Comparer( DataSet[j] , DataSet[j+1] ) > 0 ) 
                    { 
                        temp = DataSet[j+1]; 
                        DataSet[j+1] = DataSet[j]; 
                        DataSet[j] = temp; 
                    }
                }
            }
        }

        static void Main(string[] args)
        {
            int[] array = { 3, 7, 4, 2, 10 };
            
            // 4. 정렬 메소드를 호출하면 우리가 원하던 대로 정렬 방식이 분리된 정렬 코드를 얻을 수 있습니다.
            BubbleSort(array, new Compare(AscendCompare));

            for (int i = 0; i<array.Length; i++)
                Console.Write($"{array[i]} ");

            int[] array2 = { 7, 2, 8, 10, 11 };
            Console.WriteLine("\nSorting descending...");
            BubbleSort(array2, new Compare(DescendCompare));            

            for (int i = 0; i < array2.Length; i++)
                Console.Write($"{array2[i]} ");

            Console.WriteLine();
        }
    }
}


일반화 대리자
대리자는 보통의 메소드뿐 아니라 일반화 메소드도 참조할 수 있습니다.




